<div class="modal" tabindex="-1" role="dialog" style="@ModalStyle">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => DiscardAndCloseModal()">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @switch (FieldType)
                {
                    case FieldTypes.text:
                        <div class="form-floating mb-3">
                            <input class="form-control" type="text" @bind-value="@ModalData.Name" id="name" />
                            <label for="name">Field name</label>
                        </div>
                        <div class="form-floating mb-3">
                            <input class="form-control" type="text" @bind-value="@ModalData.StringData" id="data" />
                            <label for="data">Default text</label>
                        </div>
                        <div class="form-floating mb-3">
                            <input class="form-control" type="text" @bind-value="@ModalData.Placeholder" id="placeholder" />
                            <label for="placeholder">Placeholder</label>
                        </div>
                        <div class="form-floating mb-3">
                            <input class="form-control" type="text" @bind-value="@ModalData.MaxLength" id="maxlength" />
                            <label for="maxlength">Maxlength</label>
                        </div>
                        <div class="form-floating mb-3">
                            <input class="form-control" type="text" @bind-value="@ModalData.MinLength" id="minlength" />
                            <label for="minlength">Minlength</label>
                        </div>
                        break;

                    case FieldTypes.number:
                        <div class="form-floating mb-3">
                            <input class="form-control" type="text" @bind-value="@ModalData.Name" id="name" />
                            <label for="name">Field name</label>
                        </div>
                        <div class="form-floating mb-3">
                            <input class="form-control" type="text" @bind-value="@ModalData.IntegerData" id="integerdata" />
                            <label for="integerdata">Default value</label>
                        </div>
                        break;
                }


                <hr />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-warning" data-dismiss="modal" @onclick="() => DiscardAndCloseModal()">Discard</button>
                <button type="button" class="btn btn-success" data-dismiss="modal" @onclick="() => SaveAndCloseModal()">Save</button>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public FieldTypes FieldType { get; set; }
    [Parameter]
    public string Title { get; set; }
    [Parameter]
    public RenderFragment ChildContent { get; set; }
    [Parameter]
    public bool IsOpen { get; set; }
    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public FormInputFieldDefinitionDtoCreate ModalData { get; set; } = new FormInputFieldDefinitionDtoCreate();
    [Parameter]
    public EventCallback<FormInputFieldDefinitionDtoCreate> OnSave { get; set; }

    private string ModalStyle => IsOpen ? "display: block; background-color: rgba(0, 0, 0, 0.5);" : "display: none;";

    private void SaveAndCloseModal()
    {
        OnSave.InvokeAsync(ModalData);
        IsOpen = false;
        IsOpenChanged.InvokeAsync(false);
    }

    private void DiscardAndCloseModal()
    {
        IsOpen = false;
        IsOpenChanged.InvokeAsync(false);        
    }


    protected override void OnParametersSet()
    {
        ModalData = new FormInputFieldDefinitionDtoCreate() { FieldType = this.FieldType };
        base.OnParametersSet();
    }
}